<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.kh.daemoim.groupManage.mapper.GroupManageMapper">

  <!-- 모임이름 중복검사 -->
  <select id="groupNameCheck" resultType="_int">
  SELECT COUNT(*)
  FROM "GROUP"
  WHERE GROUP_NAME = #{inputName}
  AND GROUP_NO > 0
  </select>
  
  <!-- 카테고리 리스트 검색 -->
  <select id="getCategoryList" resultType="ManageCategory">
  	SELECT
  		CATEGORY_LIST_NO,
  		CATEGORY_LIST_NAME,
  		CATEGORY_NO
  	FROM
  		"CATEGORY_LIST"
  	WHERE
  		CATEGORY_NO = #{categoryNo}
  	AND	CATEGORY_LIST_NO > 0
  </select>
  
  <!-- 카테고리 검색 -->
  <select id="getCategoryArr" resultType="ManageCategory">
  	SELECT
  		CATEGORY_NO,
  		CATEGORY_NAME,
  		CATEGORY_IMG
  	FROM "CATEGORY"
  	WHERE CATEGORY_NO > 0
  </select>
  
  <!-- 그룹 생성 -->
  <insert id="createGroup"
  			parameterType="GroupManageDto"
  			useGeneratedKeys="true">
  		
  		<!-- 동적 SQL을 이용해 GROUP_NO 생성 -->
  		<selectKey order="BEFORE"
					resultType="_int"
					keyProperty="groupNo">
			SELECT SEQ_GROUP_NO.NEXTVAL FROM DUAL
		</selectKey>
		
		INSERT INTO "GROUP"
		VALUES (
			#{groupNo},
			#{groupName},
			DEFAULT, DEFAULT,
			#{groupIntroduce},
			#{categoryNo},
			#{categoryListNo},
			#{memberNo},
			#{groupMainImg},
			NULL
			)
		
  </insert>
  
  <!-- 모임 조회 -->
  <select id="selectGroup" resultType="GroupManageDto">
  	SELECT
  		GROUP_NO,
  		GROUP_NAME,
  		GROUP_DATE,
  		GROUP_DEL_FL,
  		GROUP_INTRODUCE,
  		CATEGORY_NO,
  		CATEGORY_LIST_NO,
  		MEMBER_NO,
  		GROUP_MAIN_IMG,
  		GROUP_HEADER_IMG,
  		GROUP_MAX_POPULATION,
			(SELECT CATEGORY_NAME FROM "CATEGORY" C WHERE C.CATEGORY_NO = G.CATEGORY_NO) AS "CATEGORY_NAME",
			(SELECT CATEGORY_LIST_NAME FROM "CATEGORY_LIST" C WHERE C.CATEGORY_LIST_NO = G.CATEGORY_LIST_NO) AS "CATEGORY_LIST_NAME"
  	FROM "GROUP" G
  	WHERE GROUP_NO = #{groupNo}
  </select>

	<!-- 모임 회원 등록1 모임장 등록하기 -->
	<insert id="insertGroupLeader">
		INSERT INTO "MEMBER_GROUP"
		VALUES(
			#{memberNo},
			#{groupNo},
			DEFAULT, DEFAULT, DEFAULT)
	</insert>

	<!-- 모임 상세내용 수정 -->
	<update id="updateGroup">
		UPDATE "GROUP"
		SET
			GROUP_NAME = #{groupName},
			GROUP_INTRODUCE = #{groupIntroduce},
			CATEGORY_NO = #{categoryNo},
			CATEGORY_LIST_NO = #{categoryListNo},
			GROUP_MAIN_IMG = #{groupMainImg},
			GROUP_HEADER_IMG = #{groupHeaderImg}
		WHERE
			GROUP_NO = #{groupNo}
	</update>
	
	<!-- [인터페이스] 최근작성댓글 얻어오기 -->
	<select id="getRecentComments" resultType="Comment">
		SELECT
			COMMENT_NO,
			COMMENT_CONTENT,
			<![CDATA[	
				CASE
					WHEN CURRENT_DATE - BOARD_WRITE_DATE < 1/24/60
					THEN FLOOR( (CURRENT_DATE - BOARD_WRITE_DATE) *60 *60 *24 ) || '초 전'
					
					WHEN CURRENT_DATE - BOARD_WRITE_DATE < 1/24
					THEN FLOOR( (CURRENT_DATE - BOARD_WRITE_DATE) *60 *24 ) || '분 전'
					
					WHEN CURRENT_DATE - BOARD_WRITE_DATE < 1
					THEN FLOOR( (CURRENT_DATE - BOARD_WRITE_DATE) *24 ) || '시간 전'
					
					ELSE TO_CHAR(BOARD_WRITE_DATE, 'YYYY-MM-DD')
					
				END AS "COMMENT_WRITE_DATE",
			]]>
			C.BOARD_NO,
			(SELECT M.MEMBER_NICKNAME FROM "MEMBER" M WHERE M.MEMBER_NO = C.MEMBER_NO) AS "MEMBER_NICKNAME"
		FROM
			"COMMENT" C
		JOIN "BOARD" B ON (C.BOARD_NO = B.BOARD_NO)
		WHERE
			COMMENT_DEL_FL = 'N'
		AND B.GROUP_NO = #{groupNo}
		ORDER BY
			COMMENT_WRITE_DATE DESC
		FETCH FIRST 7 ROWS ONLY
	</select>
	
	<!-- 최근 작성된 공지글 불러오기 -->
	<select id="getOrderBoard" resultType="Board">
		SELECT
			ROW_NUMBER() OVER (ORDER BY BOARD_NO ASC) "RNUM",
			BOARD_NO,
			BOARD_TITLE,
			TO_CHAR(BOARD_WRITE_DATE, 'YYYY-MM-DD') AS "BOARD_WRITE_DATE",
			READ_COUNT,
			BOARD_TYPE_CODE,
			(SELECT COUNT(*) FROM "COMMENT" C WHERE C.BOARD_NO = B.BOARD_NO ) AS "COMMENT_COUNT",
			(SELECT COUNT(*) FROM "LIKE" L WHERE L.BOARD_NO = B.BOARD_NO ) AS "LIKE_COUNT"
		FROM
			"BOARD" B
		WHERE
			BOARD_DEL_FL = 'N'
		AND BOARD_TYPE_CODE = 1
		AND GROUP_NO = #{groupNo}
		ORDER BY
			BOARD_NO DESC
		FETCH FIRST 15 ROWS ONLY
	</select>
	
	<!-- 최근 게시글 불러오기 -->
	<select id="getRecentBoard" resultType="Board">
		SELECT
			ROW_NUMBER() OVER (ORDER BY BOARD_NO ASC) "RNUM",
			BOARD_NO,
			BOARD_TITLE,
			TO_CHAR(BOARD_WRITE_DATE, 'YYYY-MM-DD') AS "BOARD_WRITE_DATE",
			READ_COUNT,
			BOARD_TYPE_CODE,
			(SELECT COUNT(*) FROM "COMMENT" C WHERE C.BOARD_NO = B.BOARD_NO ) AS "COMMENT_COUNT",
			(SELECT COUNT(*) FROM "LIKE" L WHERE L.BOARD_NO = B.BOARD_NO ) AS "LIKE_COUNT",
			(SELECT MEMBER_NICKNAME FROM "MEMBER" M WHERE M.MEMBER_NO = B.MEMBER_NO) AS "MEMBER_NICKNAME"
		FROM
			"BOARD" B
		WHERE
			BOARD_DEL_FL = 'N'
		AND BOARD_TYPE_CODE = 2
		AND GROUP_NO = #{groupNo}
		ORDER BY
			BOARD_NO DESC
		FETCH FIRST 15 ROWS ONLY
	</select>
	
	<!-- 인기글 불러오기 -->
	<select id="getPopularBoard" resultType="Board">
		SELECT
			ROW_NUMBER() OVER (ORDER BY BOARD_NO ASC) "RNUM",
			BOARD_NO,
			BOARD_TITLE,
			TO_CHAR(BOARD_WRITE_DATE, 'YYYY-MM-DD') AS "BOARD_WRITE_DATE",
			READ_COUNT,
			BOARD_TYPE_CODE,
			(SELECT COUNT(*) FROM "COMMENT" C WHERE C.BOARD_NO = B.BOARD_NO ) AS "COMMENT_COUNT",
			(SELECT COUNT(*) FROM "LIKE" L WHERE L.BOARD_NO = B.BOARD_NO ) AS "LIKE_COUNT",
			(SELECT MEMBER_NICKNAME FROM "MEMBER" M WHERE M.MEMBER_NO = B.MEMBER_NO) AS "MEMBER_NICKNAME"
		FROM
			"BOARD" B
		WHERE
			BOARD_DEL_FL = 'N'
		AND BOARD_TYPE_CODE = 2
		AND GROUP_NO = #{groupNo}
		<![CDATA[
		AND ( CURRENT_DATE - BOARD_WRITE_DATE )  <	#{period}
		]]>
		ORDER BY
			LIKE_COUNT DESC
		FETCH FIRST 15 ROWS ONLY
	</select>
	
	
</mapper>
